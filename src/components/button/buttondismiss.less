/** buttondismiss.less */

// block
// =====

.btnDismiss {

    .mixin-clearAppearance;
    .mixin-defaultBorderRadius;
    .mixin-icon-bg(@id: 'icon-006-s', @fillColor: @color-base-8, @width: 32, @height: 32);
    border: 0;
    cursor: pointer;
    display: inline-block;
    font-size: 0;
    height: 3.2rem;
    overflow: hidden;
    position: absolute;
    right: 0;
    text-color: transparent;
    top: 0;
    width: 3.2rem;

    &:hover {
        background-color: fade(@color-base-22, 50%);
    }

}

// modifiers
// =========

// colors

/*
    Any .btnDismiss inside a parent element with a certain color modifier "inherit" the colors of their parent.
    However, the color modifier class names applied directly to .btnDismiss (eg. btnDismiss btnDismiss--negative)
    beat the inheritance. In order to up the specificity, we repeat the modifier class name. It's actually
    not even a hack:

    "Repeated occurrances of the same simple selector are allowed and do increase specificity."
    https://www.w3.org/TR/css3-selectors/#specificity
*/

.btnDismiss.btnDismiss--negative.btnDismiss--negative,
[class*="-negative"] .btnDismiss {
    .constr-btnDismiss(
        @iconColor: @color-negative-10,
        @bgColorHover: @color-negative-21
    );
}

.btnDismiss.btnDismiss--positive.btnDismiss--positive,
[class*="-positive"] .btnDismiss {
    .constr-btnDismiss(
        @iconColor: @color-positive-10,
        @bgColorHover: @color-positive-21
    );
}

.btnDismiss.btnDismiss--attention.btnDismiss--attention,
[class*="-attention"] .btnDismiss {
    .constr-btnDismiss(
        @iconColor: @color-attention-10,
        @bgColorHover: @color-attention-20
    );
}

.btnDismiss.btnDismiss--dark.btnDismiss--dark,
[class*="-dark"] .btnDismiss {
    .constr-btnDismiss(
        @iconColor: @color-base-24,
        @bgColorHover: @color-base-7
    );
}

// constructor
// ===========

.constr-btnDismiss(@iconColor, @bgColorHover) {
    
    .mixin-icon-bg(
        @id: 'icon-006-s',
        @fillColor:
        @iconColor,
        @width: 32,
        @height: 32
    );
    
    &:hover {
        background-color: fade(@bgColorHover, 50%);
    }
    
}
