/** filters.less */

.filters {

    .mixin-defaultBorderRadius;
    border: @color-main-23 1px solid;
    position: relative;

    // header

    .filters__header {
        font-size: 1.5rem;
        font-weight: bold;
        padding: 1rem;
    }

    // reset button (injected via JS)

    > .btn {
        width: 100%;
    }

    > .btn + .filters__header {
        display: none;
    }

    // disabled filters (while update is runnig)

    &.filters--disabled::after {
        background: #fff;
        bottom: 0;
        content: ' ';
        left: 0;
        opacity: .5;
        position: absolute;
        right: 0;
        top: 0;
        z-index: 3;
    }

}

// filter group

.filterGroup {

    .mixin-clearfix;
    margin: 0;
    position: relative;

    // header

    .filterGroup__header {

        background: @color-main-25;
        border-top: @color-main-23 1px solid;
        box-sizing: border-box;
        cursor: pointer;
        height: 3.5rem;
        position: relative;
        user-select: none;

        h4 {
            line-height: 2.5rem;
            padding: .5rem 1rem;
            text-transform: none;
        }

    }

    &:not(.filterGroup--collapsed) .filterGroup__header,
    &.filterGroup--collapsed.filterGroup--hasActiveFilters .filterGroup__header {
        border-bottom: @color-main-23 1px solid;
    }

    // scrollable filter bodies

    &.filterGroup--isScroll .filterGroup__body {

        /*
            Applied via JS. Adds an overflow and native scrollbars
            if content is larger than max-height.
        */

        max-height: 18.5rem;
        overflow: hidden;
        overflow-y: scroll;

    }

    &.filterGroup--isScroll .filterGroup__body::after,
    &.filterGroup--isScroll .filterGroup__body::before {

        /*
            Shadow to indicate scrolling/overflow,
            initially hidden (zero height & opacity).
        */

        content: ' ';
        height: 0;
        left: 0;
        opacity: 0;
        position: absolute;
        right: 0;
        transition: opacity 700ms ease-out;
        z-index: 2;

    }

    // show shadows

    &.filterGroup--hasShadow .filterGroup__body::after,
    &.filterGroup--hasShadow .filterGroup__body::before {
        opacity: 1;
        height: 1rem;
    }

    // shadow on top

    &.filterGroup--hasShadow .filterGroup__body::before {
        background: linear-gradient(to bottom, fade(@color-main-17, 30%), @color-transparent);
        top: 3.5rem;
    }

    // shadow on bottom

    &.filterGroup--hasShadow .filterGroup__body::after {
        background: linear-gradient(to bottom, @color-transparent, fade(@color-main-17, 30%));
        bottom: 0;
    }

}

// filter buttons

.filter {

    display: block;
    margin: 0;
    padding: .5rem 3rem;
    position: relative;

    &:link {
        text-decoration: none;
    }

    &:hover {
        background: fade(@color-main-25,50%);
    }

    &.filter--active {
        background: @color-attention-22;
    }

    // counter

    .filter__counter {
        position: absolute;
        right: .5rem;
        top: .5rem;
    }

    // pseudo input elements

    &::before {
        box-sizing: border-box;
        content: ' ';
        display: inline-block;
        position: absolute;
    }

    &:hover::before {
        background: @color-main-24;
    }

    // multiple selects (like checkbox)

    &.filter--multi {

        &::before {
            border: @color-main-22 1px solid;
            height: 1rem;
            left: 1rem;
            top: 1rem;
            width: 1rem;
        }

        &.filter--active::before {
            .mixin-icon;
            background: transparent;
            border: 0;
            content: '\f011';
            height: 3rem;
            left: 0;
            line-height: 3rem;
            top: 0;
            width: 3rem;
        }

        &.filter--active:hover {
            color: @color-negative-5;
            background: @color-negative-24;
        }

        &.filter--active:hover::before {
            content: '\f006';
        }

    }

    // single select (like radio buttons)

    &.filter--single {

        &::before {
            border-radius: .5rem;
            border: @color-main-22 1px solid;
            height: 1rem;
            left: 1rem;
            top: 1rem;
            width: 1rem;
        }

        &.filter--active::before {
            background: @color-main-5;
            border: none;
        }

    }

    // rating
    
    .rating {
        position: relative;
        top: -2px;
    }

}

.filterGroup:last-child .filter:last-child {
    border-bottom: 0;
}

// if js is enabled

.js & {

    .filterGroup .filterGroup__header::after {
        .mixin-icon;
        content: '\f010';
        position: absolute;
        right: 0;
        top: 0;
        color: @color-main-22;
    }

    .filterGroup.filterGroup--collapsed .filterGroup__header::after {
        content: '\f009';
    }

    .filterGroup .filterGroup__header:hover::after {
        color: @color-main-15;
    }

}
